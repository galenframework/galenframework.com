--------------------------------
title
   Working in Command Line
--------------------------------
date
   2013-11-04 16:33
--------------------------------
allowComments
   true
--------------------------------
categories
   
================================

h2. Single page test

In order to perform a single page test you can use the command @check@. Take a look at the following example

$$ bash
galen check homepage.spec
    --url "http://example.com"
    --size "640x480"
    --javascript "some.js"
    --include "mobile,all"
    --exclude "toexclude"
    --htmlreport "htmlreport-dir"
    --testngreport "report/testng.xml"
    --jsonreport "jsonreport-dir"
$$

Command line arguments:
* *url* _- a url of page for Galen to test on_
* *javascript* _- a path for javascript file which Galen will inject in web page_
* *include* _- a comma separated list of tags for spec sections which will be included in testing_
* *exclude* _- a comma separated list of tags for spec sections to be excluded from the filtered group_
* *size* _- dimensions of browser window. Consists of two numbers separated by "x" symbol_
* *htmlreport* _- path to folder in which Galen should generate html reports_
* *testngreport* _- path to xml file in which Galen should write testng report_
* *jsonreport* _- path to folder in which Galen should generate json reports_
* *-Dwebdriver.chrome.driver* _- = path to Chrome Webdriver


h2. Running test suites

If you want to execute "Galen Test Suites":/docs/reference-galen-test-suite-syntax/ then you should use the following command


$$ bash
galen test mytest01.test
    --htmlreport "htmlreport-dir"
    --testngreport "report/testng.xml"
    --jsonreport "jsonreport-dir"
    --parallel-suites 4
$$

Command line arguments:
* *htmlreport* _- path to folder in which Galen should generate html reports_
* *testngreport* _- path to xml file in which Galen should write testng report_
* *parallel-suites* _- amount of threads for running tests in parallel_
* *recursive* _- flag which is used in case you want to search for all @.test@ files recursively in folder_
* *filter* _- a filter for a test name_


h3. Running test suites with test filter

Lets say you have multiple tests for multiple devices but you only want to execute a test for a home page. You can use '*' symbol in filter

$$ bash
galen test mytest01.test
    --htmlreport "htmlreport-dir"
    --testngreport "report/testng.xml"
    --parallel-suites 4
    --filter "Home page on * device"
$$


h3. Running test groups

In case you want to run tests only for specific groups you can use @groups@ argument in command line.

$$ bash
galen test tests/ --htmlreport report --groups homepage,loginpage
$$

You have to define your own groups that you use in your tests. If you use standard test suite then you can read about groups in this "article":/docs/reference-galen-test-suite-syntax/#TestGroups

In case you use JavaScript tests then this "article":/docs/reference-javascript-tests-guide/#TestGroups can help you.


h3. Running tests with excluded groups

Sometimes you might need to run all tests that don't belong to certain group. For this reason you can use @excluded-groups@ argument.

$$ bash
galen test tests/ --htmlreport report --excluded-groups homepage,loginpage
$$


h2. Providing system properties

Sometimes you might need to provide system properties for your tests. For instance if you want to run tests in local Chrome, IE or PhantomJS browser - you have to provide a path to each browser or a special driver binary. This could be done with system properties. Just use @-D@ prefix for command line argument. Here is an example how to run tests for phantomjs. In your case the path to phantomjs binary might be different:

$$ bash
galen test mytest01.test -Dphantomjs.binary.path=/opt/phantomjs/bin/phantomjs
$$

Or for example if you need to run your tests in Chrome

$$ bash
galen test mytest01.test -Dwebdriver.chrome.driver=/opt/chromedriver/chromedriver
$$

h2. Creating page dump

Since version 1.3 Galen has a feature of creating a page dump. With a page dump you can store information about all your test objects on the page together with image samples. 

$$ bash
galen dump "specs/homepage.spec"
    --url "http://galenframework.com"
    --size "1024x768"
    --export "dumps/homepage-dump" 
    --max-width "200" 
    --max-height "200"
$$

Command line arguments:
* *url* _- a url of a web page for which you want to create a page dump_
* *size* _- a browser window size_
* *export* _- a path to page dump folder_
* *max-width* _- a maximum width of an element for which it should create an image sample_
* *max-height* _- a maximum height of an element for which it should create an image sample_

Once the page dump is finished Galen will create a folder with specified path and will put all image samples in @objects@ folder. It also provides a @page.html@ file in which you can see all your page objects and see different spec suggestions for them.
